kind: ConfigMap
metadata:
  labels:
    app: crabserver
  name: crabserver
  namespace: crab
apiVersion: v1
data:
  config.py: |
    from WMCore.Configuration import Configuration
    import re
    import socket
    import time
    import os

    myhost = socket.getfqdn().lower()

    conf = Configuration()
    main = conf.section_('main')
    srv = main.section_('server')
    srv.thread_pool = int(os.getenv('CRABSERVER_THREAD_POOL', 25))
    main.application = 'crabserver'
    main.port = 8270
    main.index = 'data'

    main.authz_defaults = { 'role': None, 'group': None, 'site': None }
    main.section_('tools').section_('cms_auth').key_file = "%s/auth/crabserver/header-auth-key" % __file__.rsplit('/', 3)[0]

    app = conf.section_('crabserver')
    app.admin = 'cms-service-webtools@cern.ch'
    app.description = 'CRABServer RESTFull API'
    app.title = 'CRABRESTFull'

    views = conf.section_('views')
    ui = views.section_('ui')
    ui.object = 'CRABInterface.Pages.FrontPage.FrontPage'

    data = views.section_('data')
    data.object = 'CRABInterface.RESTBaseAPI.RESTBaseAPI'
    data.phedexurl = 'https://cmsweb.cern.ch/phedex/datasvc/xml/prod/'
    data.dbsurl = 'http://cmsdbsprod.cern.ch/cms_dbs_prod_global/servlet/DBSServlet'
    data.defaultBlacklist = ['T0_CH_CERN']
    data.serverhostcert = "%s/auth/crabserver/dmwm-service-cert.pem" % __file__.rsplit('/', 3)[0]
    data.serverhostkey = "%s/auth/crabserver/dmwm-service-key.pem" % __file__.rsplit('/', 3)[0]
    data.credpath = '%s/state/crabserver/proxy/' % __file__.rsplit('/', 4)[0]
    data.backend = 'oracle'
    data.db = 'CRABServerAuth.dbconfig'
    data.s3 = 'CRABServerAuth.s3'
    data.workflowManager = 'HTCondorDataWorkflow'

    data.extconfigurl = 'http://gitlab.cern.ch/crab3/CRAB3ServerConfig/raw/master/cmsweb-rest-config.json'

    data.loggingLevel = 10
    data.loggingFile = '%s/logs/crabserver/CRAB-%s.log' % (__file__.rsplit('/', 4)[0], myhost)
    data.keptLogDays = 7
    data.mode = "cmsweb-test"

    data.enableQueryLoadAllRows = os.getenv('CRABSERVER_ENABLE_QUERY_LOAD_ALL_ROWS', 'True').lower() in ('true', '1', 't')

    data.delegateDN = "/DC=ch/DC=cern/OU=computers/CN=crab-(preprod|prod)-tw(01|02).cern.ch|/DC=ch/DC=cern/OU=computers/CN=crab-dev-tw(01|02|03|04).cern.ch|/DC=ch/DC=cern/OU=Organic Units/OU=Users/CN=cmscrab/CN=(817881|373708)/CN=Robot: cms crab|/DC=ch/DC=cern/OU=Organic Units/OU=Users/CN=crabint1/CN=373708/CN=Robot: CMS CRAB Integration 1"
  entrypoint.sh: |
    #!/bin/bash

    set -x
    set -euo pipefail

    # copy robotcert
    sudo cp /etc/robots/robotkey.pem /data/srv/current/auth/crabserver/dmwm-service-key.pem
    sudo cp /etc/robots/robotcert.pem /data/srv/current/auth/crabserver/dmwm-service-cert.pem
    sudo chown $USER:$USER /data/srv/current/auth/crabserver/dmwm-service-key.pem
    sudo chown $USER:$USER /data/srv/current/auth/crabserver/dmwm-service-cert.pem

    # hmac key
    sudo cp /etc/hmac/hmac /data/srv/current/auth/crabserver/header-auth-key
    sudo chown $USER:$USER /data/srv/current/auth/crabserver/header-auth-key

    # config.py
    sudo cp /opt/config/config.py /data/srv/current/config/crabserver/config.py
    sudo chown $USER:$USER /data/srv/current/config/crabserver/config.py

    # CRABServerAuth.py
    sudo cp /etc/secrets/CRABServerAuth.py /data/srv/current/auth/crabserver/CRABServerAuth.py
    sudo chown $USER:$USER /data/srv/current/auth/crabserver/CRABServerAuth.py

    # export proxy cert generated by cron-proxy cronjob
    # test if file exist
    ls /etc/proxy/proxy
    export X509_USER_PROXY=/etc/proxy/proxy

    # grid security
    sudo cp -r /host/etc/grid-security/* /etc/grid-security
    echo 'INFO Files in /etc/grid-security'
    ls -lahZ /etc/grid-security

    exec /usr/bin/tini -- "$@"
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: crabserver
  name: crabserver
  namespace: crab
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: crabserver
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/restartedAt: "2025-08-07T17:08:26+02:00"
        prometheus.io/port: "18270"
        prometheus.io/scrape: "true"
      creationTimestamp: null
      labels:
        app: crabserver
        env: k8s-test
    spec:
      containers:
        - args:
            - /data/run.sh
          command:
            - /bin/bash
            - /opt/config/entrypoint.sh
          env:
            - name: CRABSERVER_LOGSTDOUT
              value: t
            - name: CRABSERVER_THREAD_POOL
              value: "2"
          image: registry.cern.ch/cmscrab/crabserver:v3.250820-stable
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - |
                  cmsweb-ping --url=http://localhost:8270/crabserver/dev/info --authz=/etc/hmac/hmac -verbose 0 | egrep "^[2-4]"
            failureThreshold: 3
            initialDelaySeconds: 120
            periodSeconds: 60
            successThreshold: 1
            timeoutSeconds: 60
          name: crabserver
          ports:
            - containerPort: 8270
              name: crabserver
              protocol: TCP
            - containerPort: 18270
              name: crabserver-mon
              protocol: TCP
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - |
                  cmsweb-ping --url=http://localhost:8270/crabserver/dev/info --authz=/etc/hmac/hmac -verbose 0 | egrep "^[2-4]"
            failureThreshold: 3
            periodSeconds: 60
            successThreshold: 1
            timeoutSeconds: 60
          resources:
            limits:
              cpu: 1500m
              memory: 3Gi
            requests:
              cpu: 200m
              memory: 256Mi
          securityContext:
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /etc/proxy
              name: proxy-secrets
              readOnly: true
            - mountPath: /etc/secrets
              name: secrets
              readOnly: true
            - mountPath: /etc/robots
              name: robot-secrets
              readOnly: true
            - mountPath: /etc/hmac
              name: hmac-secrets
              readOnly: true
            - mountPath: /host/etc/grid-security
              name: etc-grid-security
              readOnly: true
            - mountPath: /opt/config
              name: config
            - mountPath: /etc/token
              name: token-secrets
              readOnly: true
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        fsGroup: 2000
        runAsGroup: 1000
        runAsUser: 1000
      terminationGracePeriodSeconds: 30
      volumes:
        - name: proxy-secrets
          secret:
            defaultMode: 420
            secretName: proxy-secrets
        - name: secrets
          secret:
            defaultMode: 420
            secretName: crabserver-secrets
        - name: robot-secrets
          secret:
            defaultMode: 420
            secretName: robot-secrets
        - name: hmac-secrets
          secret:
            defaultMode: 420
            secretName: hmac-secrets
        - hostPath:
            path: /etc/grid-security
            type: ""
          name: etc-grid-security
        - configMap:
            defaultMode: 420
            name: crabserver
          name: config
        - name: token-secrets
          secret:
            defaultMode: 420
            secretName: token-secrets
apiVersion: v1
kind: Service
metadata:
  name: crabserver
  namespace: crab
spec:
  type: ClusterIP
  selector:
    app: crabserver
  ports:
    - name: crabserver
      port: 8270
    - name: crabserver-mon
      port: 18270
